module com {

    module zackehh {

        module corba {

            module common {

                struct Reading {
                    long long time;
                    long measurement;
                };

                struct SensorMeta {
                    string zone;
                    string sensor;
                    long alert_level;
                };

                struct MetaData {
                    string lms;
                    SensorMeta sensorMeta;
                };

                struct Alert {
                    MetaData meta;
                    Reading reading;
                };

                typedef sequence<Alert> Alerts;
                typedef sequence<string> LMSNames;
                typedef sequence<Reading> Readings;
                typedef sequence<SensorMeta> Sensors;
                typedef sequence<string> Zones;

            };

            module sensor {

                interface Sensor {
                    readonly attribute string id;
                    readonly attribute string zone;

                    boolean powerOff();
                    boolean powerOn();
                    void reset();
                    void sendAlert(in long measurement);

                    common::Reading currentReading();
                    common::Readings getReadingLog();
                };

            };

            module lms {

                interface LMS {
                    readonly attribute common::Alerts alertLog;
                    readonly attribute string name;

                    boolean ping();

                    common::Alerts getCurrentState();
                    common::Sensors getRegisteredSensors();
                    common::SensorMeta registerSensor(in string zone);
                    void receiveAlert(in common::Alert alert);
                    boolean removeSensor(in common::SensorMeta tuple);
                };

            };

            module rmc {

                interface RMCClient {
                    readonly attribute string id;

                    void addAlert(in common::Alert alert);
                    void removeAlert(in common::MetaData metadata);

                    common::LMSNames getLMSList();
                };

                interface RMCServer {
                    readonly attribute string name;

                    boolean ping();

                    void cancelAlert(in common::MetaData metadata);
                    void receiveAlert(in common::Alert alert);

                    boolean registerClient(in string id);
                    boolean removeClient(in string id);

                    boolean registerLMSConnection(in string name);
                    boolean removeLMSConnection(in string name);

                    common::Alerts getAlerts();
                    common::Alerts getDistrictState(in string district);
                    common::LMSNames getKnownStations();
                    lms::LMS getConnectedLMS(in string name);
                };

            };

        };

    };

};